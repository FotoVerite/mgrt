#!/usr/bin/env node
var program = require('commander'),
    Mgrt = require('../lib/mgrt'),
    fileStorage = require('mgrt-file-storage'),
    migrations = require('mgrt-migrations'),
    colors = require('colors'),
	resolve = require('path').resolve,
    DEFAULT_PATH = 'migrations',
    DEFAULT_TEMPLATE_PATH = __dirname + '/../lib/template/default.js';

program
	.version(require('../package').version);

var mgrt = function(context) {
	var path = context.path || DEFAULT_PATH;

	var env = {
		path: path
	}

	var verbs = {
		up: 'migrate',
		down: 'reverse'
	}

	var mgrt = new Mgrt(env)
		.on('nop', function(direction) {
			console.log(('Nothing to ' + verbs[direction]).red);
		})
		.on('start', function(direction) {
			console.log('Migration started '.blue + direction.red);
		})
		.on('migration', function(migration, direction) {
			console.log(('Successfully ' + verbs[direction] + 'd: ').green + migration.name);
		})
		.on('error', function(migration, direction, reason) {
			console.log('Error occurred during migration: '.red + migration.name);
			if (reason) {
				console.log(reason);
			}
		})
		.on('create', function(migration) {
			console.log('Successfully created migration: '.green + migration);
		})
		.use(migrations);


		if (!context.storage) {
			mgrt.use(fileStorage);
		} else {
			var storage = require(resolve(context.storage));

			if (!storage || !storage.get || !storage.set) {
				throw Error('Mgrt requires valid storage to run, please!');
			}

			mgrt.env.storage = storage;
		}

		return mgrt;
}

program
	.command('up')
	.option('-p, --path <path>', 'Path to migrations base directory')
	.option('-f, --force', 'Force up all migrations', false)
	.option('-n, --nosave', 'Do not save migrations data to storage')
	.option('-s, --storage <path>', 'Use specific migrations storage')
	.description('Apply pending migrations')
	.action(function(context) {
		mgrt(context)
			.on('complete', process.exit)
			.on('error', process.exit)
			.run('up', context);
	});

program
	.command('down')
	.option('-p, --path <path>', 'Path to migrations base directory')
	.option('-f, --force', 'Force down all migrations', false)
	.option('-n, --nosave', 'Do not save migrations data to storage')
	.option('-s, --storage <path>', 'Use specific migrations storage')
	.description('Rollback applied migrations')
	.action(function(context) {
		mgrt(context)
			.on('complete', process.exit)
			.on('error', process.exit)
			.run('down', context);
	});

program
	.command('refresh')
	.option('-p, --path <path>', 'Path to migrations base directory')
	.option('-f, --force', 'Force down all migrations')
	.option('-n, --nosave', 'Do not save migrations data to storage')
	.option('-s, --storage <path>', 'Use specific migrations storage')
	.description('Down and up migrations')
	.action(function(context) {
		var m = mgrt(context);

		var up = function(direction) {
			if ('down' === direction) {
				console.log('\n---\n');
				m.run('up', context);
			} else {
				process.exit();
			}
		}

		m.on('error', process.exit);
		m.on('complete', up);
		m.on('nop', up);

		m.run('down', context);
	});

program
	.command('create <name>')
	.option('-p, --path <path>', 'Path to migrations base directory')
	.option('-t, --template <path>', 'Path to migration template')
	.description('Create new migration')
	.action(function(name, context) {
		if ('string' === typeof name && name.length) {
			var templatePath = context.template || DEFAULT_TEMPLATE_PATH;
			mgrt(context).create(name, templatePath);
		}
	});

program.parse(process.argv);

if (!program.args.length) {
	program.help();
}
