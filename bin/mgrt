#!/usr/bin/env node
var Mgrt = require('../lib/mgrt'),
    realist = require('realist'),
    fileStorage = require('mgrt-file-storage'),
    migrations = require('mgrt-migrations'),
    colors = require('colors'),
    read = require('fs').readFileSync,
	resolve = require('path').resolve;

var DEFAULT_PATH = 'migrations',
    DEFAULT_TEMPLATE_PATH = __dirname + '/../lib/template/default.js',
    USAGE = read(__dirname + '/../usage.txt').toString();

var mgrt = function(context) {
	var path = context.path || DEFAULT_PATH;

	var env = {
		path: path
	}

	var verbs = {
		up: 'migrate',
		down: 'reverse'
	}

	var mgrt = new Mgrt(env)
		.on('nop', function(direction) {
			console.log(('Nothing to ' + verbs[direction]).red);
		})
		.on('start', function(direction) {
			console.log('Migration started '.blue + direction.red);
		})
		.on('migration', function(migration, direction) {
			console.log(('Successfully ' + verbs[direction] + 'd: ').green + migration.name);
		})
		.on('error', function(migration, direction, reason) {
			console.log('Error occurred during migration: '.red + migration.name);
			if (reason) {
				console.log(reason);
			}
		})
		.on('create', function(migration) {
			console.log('Successfully created migration: '.green + migration);
		})
		.use(migrations);


		if (!context.storage) {
			mgrt.use(fileStorage);
		} else {
			var storage = require(resolve(context.storage));

			if (!storage || !storage.get || !storage.set) {
				throw Error('Mgrt requires valid storage to run, please!');
			}

			mgrt.env.storage = storage;
		}

		return mgrt;
}

var options = {
	template: ['t', 'template'],
	storage:  ['s', 'storage'],
	nosave:   ['n', 'nosave'],
	force:    ['f', 'force'],
	path:     ['p', 'path']
};

var migrate = function(direction) {
	return function(opt, steps) {
		mgrt(opt)
			.on('complete', process.exit)
			.on('nop', process.exit)
			.on('error', process.exit)
			.run(direction, opt);
	};
};

var commands = {
	'up [steps]': migrate('up'),

	'down [steps]': migrate('down'),

	'refresh': function(opt) {
		var m = mgrt(opt);

		var up = function(direction) {
			if ('down' === direction) {
				console.log('\n---\n');
				m.run('up', opt);
			} else {
				process.exit();
			}
		}

		m.on('error', process.exit);
		m.on('complete', up);
		m.on('nop', up);

		m.run('down', opt);
	},

	'create <migration-name>': function(opt, name) {
		if ('string' === typeof name && name.length) {
			var templatePath = opt.template || DEFAULT_TEMPLATE_PATH;
			mgrt(opt).create(name, templatePath);
		}
	}
};

var usage = function(app) {
	console.log(USAGE);
	app.stop();
};

events = {
	'help': usage,
	'default': usage
};

realist(commands, options, events);
