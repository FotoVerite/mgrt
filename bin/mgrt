#!/usr/bin/env node
var program = require('commander'),
    Mgrt = require('../lib/mgrt'),
    DEFAULT_PATH = 'migrations',
    DEFAULT_TEMPLATE_PATH = __dirname + '/../lib/template/default.js';

program
	.version(require('../package').version);

var mgrt = function(context) {
	var path = context.path || DEFAULT_PATH;
	var env = {
		path: path
	}

	return new Mgrt(env);
}

program
	.command('up')
	.option('-p, --path <path>', 'Path to migrations base directory')
	.option('-f, --force', 'Force up all migrations', false)
	.option('-n, --nosave', 'Do not save migrations data to storage')
	.description('Apply pending migrations')
	.action(function(context) {
		mgrt(context)
			.on('complete', process.exit)
			.on('error', process.exit)
			.run('up', context);
	});

program
	.command('down')
	.option('-p, --path <path>', 'Path to migrations base directory')
	.option('-f, --force', 'Force down all migrations', false)
	.option('-n, --nosave', 'Do not save migrations data to storage')
	.description('Rollback applied migrations')
	.action(function(context) {
		mgrt(context)
			.on('complete', process.exit)
			.on('error', process.exit)
			.run('down', context);
	});

program
	.command('refresh')
	.option('-p, --path <path>', 'Path to migrations base directory')
	.option('-f, --force', 'Force down all migrations')
	.option('-n, --nosave', 'Do not save migrations data to storage')
	.description('Down and up migrations')
	.action(function(context) {
		var m = mgrt(context);

		var up = function(direction) {
			if ('down' === direction) {
				console.log('\n---\n');
				m.run('up', context);
			} else {
				process.exit();
			}
		}

		m.on('error', process.exit);
		m.on('complete', up);
		m.on('nop', up);

		m.run('down', context);
	});

program
	.command('create <name>')
	.option('-p, --path <path>', 'Path to migrations base directory')
	.option('-t, --template <path>', 'Path to migration template')
	.description('Create new migration')
	.action(function(name, context) {
		if ('string' === typeof name && name.length) {
			var templatePath = context.template || DEFAULT_TEMPLATE_PATH;
			mgrt(context).create(name, templatePath);
		}
	});

program.parse(process.argv);

if (!program.args.length) {
	program.help();
}
